// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// novus_std/stdlib.novus
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _novus_stdStdlibNovus = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x51\xb1\x6e\xec\x20\x10\xec\xfd\x15\xa3\xab\x40\x8f\xe2\xf5\x8e\xbf\x24\x8a\x2c\xc2\x2d\x39\x22\x82\x4f\x0b\x4e\x13\xdd\xbf\x47\x8b\x8d\xed\x53\x92\xf2\xa8\xec\x9d\x61\x66\x67\xf8\xb4\x8c\x0f\x7b\xc5\x00\x3f\x27\xe5\xe7\xe4\x0c\xdc\x14\xa3\xc6\x57\x07\x00\x82\x87\x42\x6c\x5f\x23\xad\x24\x81\xc9\x19\x5c\x79\x72\xe7\xc6\x93\x13\x3c\x54\xa4\x46\xd0\x18\x06\xfc\x3f\xe2\x72\x98\xca\x72\xb1\xdf\xc6\x37\x50\xcc\xf4\x0b\xaf\xf9\x2a\xa6\x5c\x9a\xaa\x91\x1d\x9c\xaa\x1a\x06\x3e\xf0\x0e\x69\x7d\x10\xad\x5f\xb7\x65\x70\x27\x26\x64\x83\xe7\x17\xdd\x77\xb7\xbe\xeb\x24\x20\xd3\x79\x76\xf4\x90\x0e\x9e\x1e\xd8\xc1\x5d\xf8\xb6\xcb\x5f\x1d\x48\x08\x2f\xdb\x6f\x97\xf4\x0e\x30\x06\x6c\x06\x87\xf9\x34\x97\x25\xb0\x53\xbe\x95\xcd\xcd\xe2\xe7\x7a\xac\x8d\x5c\x91\x66\x97\x62\x73\xe1\xd1\x4d\xc9\xd9\x55\x46\xc5\x4b\x36\xe0\x4b\x6e\x95\x88\x46\x2e\x1c\xd2\x9b\x40\x1a\xff\xda\x9f\x70\xf6\x07\xf2\x21\xd2\xc8\x64\xcf\xab\xcc\xd5\x96\xcb\xf1\x75\x62\x48\x94\x6b\xb8\x95\x37\xd6\xc9\xc2\xeb\x8f\x4e\xe3\xfb\x14\x92\xaa\xa8\xc1\x09\xa7\x6a\xf2\x1d\x00\x00\xff\xff\x1c\xd3\x0c\x24\x05\x03\x00\x00")

func novus_stdStdlibNovusBytes() ([]byte, error) {
	return bindataRead(
		_novus_stdStdlibNovus,
		"novus_std/stdlib.novus",
	)
}

func novus_stdStdlibNovus() (*asset, error) {
	bytes, err := novus_stdStdlibNovusBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "novus_std/stdlib.novus", size: 773, mode: os.FileMode(420), modTime: time.Unix(1542326839, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"novus_std/stdlib.novus": novus_stdStdlibNovus,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"novus_std": &bintree{nil, map[string]*bintree{
		"stdlib.novus": &bintree{novus_stdStdlibNovus, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
